<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Developer. Roboticist. Hacker.</description>
    <link>http://localhost:4444//</link>
    <atom:link href="http://localhost:4444//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 22 Aug 2020 13:42:27 -0500</pubDate>
    <lastBuildDate>Sat, 22 Aug 2020 13:42:27 -0500</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>Home Surveillance Assistant (HSA)</title>
        <description>&lt;p&gt;HSA is a personal project of mine, sprung up initially through the boredom of not having anything to do while at home for winter break. The goal was to make a two wheel differential drive robot using only off the shelf components that could be controlled and visualized remotely.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Currently, HSA has gone through one major iteration. The first iteration of HSA included the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2 NeveRest Classic 40 Gearmotors&lt;/li&gt;
  &lt;li&gt;1 L298 Dual Motor Driver&lt;/li&gt;
  &lt;li&gt;1 TalentCell 12V 6000mAh DC Battery Pack&lt;/li&gt;
  &lt;li&gt;1 Raspberry Pi 3&lt;/li&gt;
  &lt;li&gt;1 Arduino Uno&lt;/li&gt;
  &lt;li&gt;1 Raspberry Pi Camera&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The chassis for the robot was designed to be made with MDF, in the shape of a box. The two actuated wheels would be supported by a single caster on the opposite side of the box. Since we did not have any power tools, the chassis was cut using handsaws and assembled with screws and wood glue. To get a higher vantage point, I planned to have the camera attached on top of a long PVC pipe. This pipe attached to the base of the chassis. Further, an acrylic sheet was placed on top of the bottom box, secured with magnets.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hsa/hsa12.jpg&quot; alt=&quot;HSA 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Initially, I planned to power the gearmotors with the 12V from the TalentCell and control them with the L298 driver. After wiring up this setup and testing, I realized that I had made a large mistake. The gearmotors I had bought had a stall current of around 11 A, while the battery pack could only support 2 A. Further, the L298 driver could only handle constant 2 A combined from both ports. This lack of power led to an inability to properly control the speed of the motors.&lt;/p&gt;

&lt;p&gt;Nevertheless, I pushed forward in the development of HSA. At this point, I was not very familiar in ROS. As a result, I used a ROS-clone that the founder of the Atlas Project had written, called Atlasbuggy. Using this proprietary backend, I was able to write software to control the actuators as well as broadcast video from the Pi Camera.&lt;/p&gt;

&lt;p&gt;I created a multi-platform application using the &lt;a href=&quot;https://ionicframework.com/&quot;&gt;Ionic Framework&lt;/a&gt;, allowing me to communicate with HSA through HTTP requests. Through this, I was able to create a mobile application to control the robot’s and camera’s movement while seeing the camera view. The following is an example of how it worked:&lt;/p&gt;

&lt;iframe width=&quot;1920&quot; height=&quot;1080&quot; src=&quot;https://www.youtube.com/embed/Y1jixg0DsWU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;hsa-2&quot;&gt;HSA 2&lt;/h2&gt;

&lt;p&gt;The next time I was home for break, I decided to improve upon the first HSA. For this iteration, I decided to use a 3S LiPo battery to power the robot and two Cytron 13A DC motor drivers. The new design had a circular design and had two caster wheels instead of one for further stability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hsa/hsa2.jpg&quot; alt=&quot;HSA 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With these motor drivers, I am able to properly control the speed of the motors. Further, I purchased encoder wires for the attached motor encoders. With these motor encoders, I am able to get the position of the wheels.&lt;/p&gt;

&lt;p&gt;Using the encoder data, I wrote a simple velocity calculator utilizing a first order filter. An explanation of this method is shown below:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# new_vel is calculated from encoder vals and time
# cur_vel is current calculated velocity
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_vel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_vel&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cur_vel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_vel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above, we can see that the velocity estimate converges to the actual velocity depending on the value of K. The lower the value of K, the system is better at getting rid of noise but worse at converging. The higher the value of K, the system is faster at converging but worse at handling noise. By tuning this constant, we get a decent velocity estimate from the wheels.&lt;/p&gt;

&lt;p&gt;By using this velocity estimate, we can develop a feedback velocity controller for the wheels, allowing us to precisely control the velocity of each wheel.&lt;/p&gt;

&lt;p&gt;The software of HSA 2 is still under development, but I will update this page when more progress is made.&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Nov 2013 04:18:00 -0600</pubDate>
        <link>http://localhost:4444//project/2013/11/11/hsa.html</link>
        <guid isPermaLink="true">http://localhost:4444//project/2013/11/11/hsa.html</guid>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>The Atlas Project</title>
        <description>&lt;p&gt;Unique to Carnegie Mellon University, buggy is a competition where Greek and independent organizations race with their buggies, small, low, aerodynamic vehicles, powered only by gravity and human pushers. Traditionally, students are recruited to drive these on the course. In the Atlas Project, our goal to make a buggy that can drive itself around the course using only the limited knowledge we can get from our sensors.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;The project had grown significantly from its origins as a crazy idea fulfilled by two enthusiastic roommates, now garnering a small following. I was not one of the founders of this project; I joined two years after its founding, a freshman looking for a way to make a mark on campus. From then on, I worked my way up, becoming the president of the project and leading it to its recognition as a student organization.&lt;/p&gt;

&lt;h2 id=&quot;roboquasar&quot;&gt;RoboQuasar&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/atlasproject/quasar2.jpg&quot; alt=&quot;RoboQuasar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When I joined the project, work was taking place to retrofit Quasar, an old aluminum frame and shell buggy built to race in 2002, into an autonomous platform (now known as RoboQuasar). I was still new to the project, so I spent this year starting to learn about the ins and outs of robotics programming.&lt;/p&gt;

&lt;h3 id=&quot;hardware-issues&quot;&gt;Hardware Issues&lt;/h3&gt;

&lt;p&gt;We built RoboQuasar with the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Steering system powered through timing belt and stepper motor.&lt;/li&gt;
  &lt;li&gt;Integrated Measurement Unit (IMU) to measure orientation.&lt;/li&gt;
  &lt;li&gt;GPS to measure position.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These three things would (hypothetically) give us all we need to figure out where we are and actuate the buggy to where it needed to be. However, we ultimately found many issues with this setup, specifically in the steering and GPS.&lt;/p&gt;

&lt;p&gt;First off, our steering system was driven by a stepper motor connected to a large circular bearing with a timing belt. Since we were using a stepper motor, we were able to get fast and accurate turns with the motor. However, Quasar was not built with suspension, and as a result, was a &lt;strong&gt;very&lt;/strong&gt; bumpy ride. This caused issues with our timing belt setup, often resulting in stepper skips and looseness in the belt, despite attempts at tightening it.&lt;/p&gt;

&lt;p&gt;Further, the consumer GPS we used (Adafruit Ultimate GPS Breakout) had trouble on certain parts of the course. The buggy course is pictured below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atlasproject/course.jpg&quot; alt=&quot;Buggy course&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the image above, we can see that hills 1, 3, 4, and 5 are very close to buildings. These buildings caused interference with the GPS signal, resulting in faulty readings and sometimes no readings at these positions. Further, in the first half of the free roll, the track is covered by many trees. These trees further block the receiver’s reception to the satellites, leading to spotty reception on the course.&lt;/p&gt;

&lt;h3 id=&quot;localization-troubles&quot;&gt;Localization Troubles&lt;/h3&gt;

&lt;p&gt;At the beginning, in 2016, we had not tested for these fundamental issues, ultimately resulting in issues down the line. Instead, we put all of our effort (our team was around five people at the time) into determining how to localize the buggy on the course.&lt;/p&gt;

&lt;p&gt;This year, we utilized just the GPS as our localizer. However, for reasons listed above, the frequency with which we received GPS data was certainly not ideal, leading to a relatively significant delay on our localization as well as some drift for certain portions of the course. To account for this drift, we started at the same spot at the beginning of the course. We noted this position and given the first few measurements of the GPS, we calculated a bias value that we used for the entire course.&lt;/p&gt;

&lt;p&gt;Further, the IMU gave us an angle relative to where the device was started. To bring this angle into a global frame, we used a compass to calculate the angle at the beginning of the course whenever the buggy started. This was used as an additional bias to the sensor data.&lt;/p&gt;

&lt;p&gt;Using this fairly simple method, we were sometimes able to get decent localization estimates around the course. However, certain areas of the course still proved to have significantly different drift and localization attempts were not consistent.&lt;/p&gt;

&lt;h3 id=&quot;controlling-roboquasar&quot;&gt;Controlling RoboQuasar&lt;/h3&gt;

&lt;p&gt;For the controller, we used a very simple controller. Since our state estimate was in longitude and latitude, we could use google maps to give us waypoints along the course. These waypoints gave us locations where we wanted RoboQuasar to be. The estimator above (primary GPS and IMU) gave us our position and orientation on the course. Our controller simply pointed the steering at the next waypoint given our current position.&lt;/p&gt;

&lt;p&gt;This method of controller and estimator worked &lt;strong&gt;sometimes&lt;/strong&gt;. However, it was very volatile. One wrong measurement could call disaster for the entire system. We were actually able to get one fully autonomous run around the course, with some crashes.&lt;/p&gt;

&lt;h2 id=&quot;babybuggy&quot;&gt;BabyBuggy&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atlasproject/babybuggy1.jpg&quot; alt=&quot;BabyBuggy!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following year, in 2017, after our experience with RoboQuasar, we came to the conclusion that we did not have enough sensors to properly localize and control the buggy. Again, due to lack of significant funding, we decided to retrofit. This time, however, we came across a baby stroller in a Massachusetts junkyard. We also came across a LIDAR being sold on eBay for $800, a solid deal for us! So, in the end, the aptly named BabyBuggy was built with the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Linear actuator for steering.&lt;/li&gt;
  &lt;li&gt;Integrated Measurement Unit (IMU) for relative orientation.&lt;/li&gt;
  &lt;li&gt;GPS for latitude/longitude position.&lt;/li&gt;
  &lt;li&gt;Two wheel encoders for velocity and distance estimation.&lt;/li&gt;
  &lt;li&gt;LMS200 LIDAR sensor for range measurements.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The priority for this year was building the buggy, so a significant portion of our team was unable to work on the development of software.&lt;/p&gt;

&lt;h3 id=&quot;dead-reckoning&quot;&gt;Dead Reckoning&lt;/h3&gt;

&lt;p&gt;In 2018, however, we began to get a better idea of how to approach this problem. After researching the localization problem, we came up with a few methods of localization:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pure GPS Localization&lt;/li&gt;
  &lt;li&gt;Dead Reckoning w/ GPS bias&lt;/li&gt;
  &lt;li&gt;Dead Reckoning w/ no bias&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From our experience in 2016, we realized that purely GPS-based localization would cause issues on the course, so we were more focused on the Dead Reckoning solutions. In the end, we were able to make a simple velocity estimator with the encoders by utilizing a first order filter. Using this velocity estimate and a relative yaw, pitch, and roll from the IMU, we could systematically estimate our position and orientation in 3D by doing the following update (pulled directly from our dead reckoning code):&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;yawMatrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pitchMatrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rollMatrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;roll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;roll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;roll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;roll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yawMatrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pitchMatrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rollMatrix&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vel_mat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;transf_vel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vel_mat&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cur_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev_time&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;prev_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_time&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transf_vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transf_vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transf_vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We fed this dead reckoned estimate into a ROS package known as &lt;a href=&quot;http://wiki.ros.org/gmapping&quot; target=&quot;_blank&quot;&gt;gmapping&lt;/a&gt;. With a lot of tuning, we were able to get a decent map of the course. However, this map still has some loop closure issues, likely caused by lack of sufficient data. We are working on making a better map with clearer features.&lt;/p&gt;

&lt;p&gt;We are currently working on the controller for BabyBuggy. We plan to roll BabyBuggy again during the 2019 Sweepstakes (Buggy) competition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/atlasproject/map.png&quot; alt=&quot;Generated Map&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dunebuggy&quot;&gt;DuneBuggy&lt;/h2&gt;

&lt;p&gt;DuneBuggy is our newest autonomous platform. Currently, it is still under construction. The chassis is made from a Razor Dunebuggy that was found on Amazon. We are planning to utilize all we learned from past years in this retrofit.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;p&gt;All the software for this project can be found in our &lt;a href=&quot;https://github.com/AtlasBuggy&quot;&gt;GitHub Organization&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Nov 2013 04:18:00 -0600</pubDate>
        <link>http://localhost:4444//project/2013/11/10/atlas-project.html</link>
        <guid isPermaLink="true">http://localhost:4444//project/2013/11/10/atlas-project.html</guid>
        
        
        <category>Project</category>
        
      </item>
    
  </channel>
</rss>
